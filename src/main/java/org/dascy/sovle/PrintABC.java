package org.dascy.sovle;import java.util.concurrent.Semaphore;import java.util.concurrent.atomic.AtomicInteger;import java.util.concurrent.locks.Condition;import java.util.concurrent.locks.ReentrantLock;/** * @author dongjunzhi * @Title: PrintABC * @ProjectName TreadTestDemo * @Description:  三线程交替打印ABC * 控制三个线程的执行顺序。 * @create 2024/7/2 14:41 */public class PrintABC {    public static void main(String[] args) throws Exception{        Demo04();    }   static  int  state = 0;    //使用Semaphore 来实现    public static void  Demo01(){        Semaphore a =new Semaphore(1);        Semaphore b =new Semaphore(0);        Semaphore c =new Semaphore(0);        Thread printA  =new Thread(new Runnable() {            @Override            public void run() {                try {                    for (int i = 0; i < 100; i++) {                        a.acquire();                        System.out.println("A");                        state++;                        b.release();                    }                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }            }        });        Thread printB  =new Thread(new Runnable() {            @Override            public void run() {                try {                    for (int i = 0; i < 100; i++) {                        b.acquire();                        System.out.println("B");                        state++;                        c.release();                    }                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }            }        });        Thread printC  =new Thread(new Runnable() {            @Override            public void run() {                try {                    for (int i = 0; i < 100; i++) {                        c.acquire();                        System.out.println("C");                        state++;                        a.release();                    }                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }            }        });        printA.start();        printB.start();        printC.start();    }    public static Object lock =new Object();    //Synchronized关键字加wait notifyAll 实现    public static void  Demo02(){        Thread printA = new Thread(new Runnable() {            @Override            public void run() {                try {                for (int i = 0; i < 100; i++) {                    synchronized (lock){                        while (state%3!=0){                           lock.wait();                        }                        System.out.println("A");                        state++;                        lock.notifyAll();                    }                }                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }            }        });        Thread printB = new Thread(new Runnable() {            @Override            public void run() {                try {                    int total =0;                    for (int i = 0; i < 100; i++) {                        synchronized (lock){                            while (state%3!=1){                                lock.wait();                            }                            System.out.println("B");                            total++;                            state++;                            lock.notifyAll();                        }                    }                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }            }        });        Thread printC = new Thread(new Runnable() {            @Override            public void run() {                try {                    for (int i = 0; i < 100; i++) {                        synchronized (lock){                            while (state%3!=2){                                lock.wait();                            }                            System.out.println("C");                            state++;                            lock.notifyAll();                        }                    }                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }            }        });        printA.start();        printB.start();        printC.start();    }     private static final ReentrantLock reentrantLock =new ReentrantLock();    private  static final Condition A =reentrantLock.newCondition();    private  static final Condition B =reentrantLock.newCondition();    private  static final Condition C =reentrantLock.newCondition();    public  static void Demo03(){        Thread printA=new Thread(new Runnable() {            @Override            public void run() {                try{                for (int i = 0; i < 100; i++) {                    reentrantLock.lock();                    while (state%3!=0){                        A.await();                    }                    System.out.println("A");                    state++;                    B.signal();                }                }catch (InterruptedException e){                    throw  new RuntimeException();                }finally {                    reentrantLock.unlock();                }            }        });        Thread printB=new Thread(new Runnable() {            @Override            public void run() {                try{                    for (int i = 0; i < 100; i++) {                        reentrantLock.lock();                        while (state%3!=1){                            B.await();                        }                        System.out.println("B");                        state++;                        C.signal();                    }                }catch (InterruptedException e){                    throw  new RuntimeException();                }finally {                    reentrantLock.unlock();                }            }        });        Thread printC=new Thread(new Runnable() {            @Override            public void run() {                try{                    for (int i = 0; i < 100; i++) {                        reentrantLock.lock();                        while (state%3!=2){                            C.await();                        }                        System.out.println("C");                        state++;                        A.signal();                    }                }catch (InterruptedException e){                    throw  new RuntimeException();                }finally {                    reentrantLock.unlock();                }            }        });        printA.start();        printB.start();        printC.start();    }    private static AtomicInteger flag= new AtomicInteger(0);    public static  void Demo04(){           Thread a =new Thread(new Runnable() {               @Override               public void run() {                   for (int i = 1; i <= 100; ) {                       if (flag.get()%3==0){                           System.out.println("A");                           flag.compareAndSet(flag.get(),flag.get()+1);                           i++;                       }                   }               }           });        Thread b=new Thread(new Runnable() {            @Override            public void run() {                for (int i = 1; i <= 100; ) {                    if (flag.get()%3==1){                        System.out.println("B");                        flag.compareAndSet(flag.get(),flag.get()+1);                        i++;                    }                }            }        });        Thread c =new Thread(new Runnable() {            @Override            public void run() {                for (int i = 1; i <= 100; ) {                    if (flag.get()%3==2){                        System.out.println("C");                        flag.compareAndSet(flag.get(),flag.get()+1);                        i++;                    }                }            }        });        a.start();        b.start();        c.start();    }}